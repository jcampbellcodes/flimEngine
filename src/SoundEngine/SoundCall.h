#ifndef SoundCall_H
#define SoundCall_H

#include "HandleManager.h"
#include "Handle.h"
#include "snd_err.h"
#include "SoundCallRegistry.h"
#include "SndExecutioner.h"
#include "Timer.h"
#include "flimReverb.h"
class SoundCall
{
public:
	// defaults
	SoundCall() = delete;
	SoundCall(const SoundCall &);
	const SoundCall &operator=(const SoundCall &);
	~SoundCall();

	SoundCall(SoundCallID _id, bool _3D = false);

	// public
	//SoundCall(const char* SoundCall);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	SoundCall::SoundCall(SoundCallID _id, int _priority);
	///
	/// \brief	Constructor.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	_id		 	The identifier.
	/// \param	_priority	The priority.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	SoundCall(SoundCallID _id, int _priority);
	//SoundCall(SoundCallID _id);

	// modifiers

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Pan(float p, int triggerTime = 0);
	///
	/// \brief	Pans.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	p		   	The float to process.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Pan(float p, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Pan(float from, float to, float time, int triggerTime = 0);
	///
	/// \brief	Pans.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	from	   	Source for the.
	/// \param	to		   	to.
	/// \param	time	   	The time.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Pan(float from, float to, float time, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Loop(bool toLoop, int triggerTime = 0);
	///
	/// \brief	Loops.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	toLoop	   	True to to loop.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Loop(bool toLoop, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Pitch(float p, int triggerTime = 0);
	///
	/// \brief	Pitches.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	p		   	The float to process.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Pitch(float p, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Pitch(float from, float to, float time, int triggerTime = 0);
	///
	/// \brief	Pitches.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	from	   	Source for the.
	/// \param	to		   	to.
	/// \param	time	   	The time.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Pitch(float from, float to, float time, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Volume(float p, int triggerTime = 0);
	///
	/// \brief	Volumes.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	p		   	The float to process.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Volume(float p, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Volume(float from, float to, float time, int triggerTime = 0);
	///
	/// \brief	Volumes.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	from	   	Source for the.
	/// \param	to		   	to.
	/// \param	time	   	The time.
	/// \param	triggerTime	(Optional) The trigger time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Volume(float from, float to, float time, int triggerTime = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Play(bool toLoop = false, int t = 0, int _priority = 0);
	///
	/// \brief	Plays.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	toLoop   	(Optional) True to to loop.
	/// \param	t		 	(Optional) The int to process.
	/// \param	_priority	(Optional) The priority.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Play(bool toLoop = false, int t = 0, int _priority = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Stop(int t = 0);
	///
	/// \brief	Stops the given t.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	t	(Optional) The int to process.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Stop(int t = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::Pause(int t = 0);
	///
	/// \brief	Pauses the given t.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	t	(Optional) The int to process.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err Pause(int t = 0);

	snd_err PrintDuration(int time, const char* name);

	//accessors

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::IsPlaying(bool&);
	///
	/// \brief	Is playing.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err IsPlaying(bool&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetTimeSinceStarted(int&);
	///
	/// \brief	Gets time since started.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The time since started.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetTimeSinceStarted(int&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetVolume(float&);
	///
	/// \brief	Gets a volume.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The volume.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetVolume(float&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetPitch(float&);
	///
	/// \brief	Gets a pitch.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The pitch.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetPitch(float&);  

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetPan(float&);
	///
	/// \brief	Gets a pan.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The pan.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetPan(float&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetPriority(int&);
	///
	/// \brief	Gets a priority.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The priority.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetPriority(int&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetPriorityIndex(int&);
	///
	/// \brief	Gets priority index.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The priority index.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetPriorityIndex(int&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::GetLoop(bool&);
	///
	/// \brief	Gets a loop.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	parameter1	The first parameter.
	///
	/// \return	The loop.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err GetLoop(bool&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	unsigned int SoundCall::GetHandleNo();
	///
	/// \brief	Gets handle no.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \return	The handle no.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	unsigned int GetHandleNo();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SubmitSoundEndedCallback(CallbackCommand* cmd);
	///
	/// \brief	Callback, called when the submit sound ended.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param [in,out]	cmd	If non-null, the command.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SubmitSoundEndedCallback(CallbackCommand* cmd);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::setPosition(const Vect&);
	///
	/// \brief	Sets a position.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	parameter1	The first parameter.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err setPosition(const Vect&);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::setOrientation(const Vect & vect, float xU, float yU, float zU);
	///
	/// \brief	Sets an orientation.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	vect	The vect.
	/// \param	xU  	The x coordinate u.
	/// \param	yU  	The y coordinate u.
	/// \param	zU  	The z coordinate u.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err setOrientation(const Vect & vect, float xU, float yU, float zU);



	// reverb

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbLevel(float level);
	///
	/// \brief	Sets reverb level.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	level	The level.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbLevel(float level);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbTime(float time);
	///
	/// \brief	Sets reverb time.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	time	The time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbTime(float time);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbPreDelay(float time);
	///
	/// \brief	Sets reverb pre delay.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	time	The time.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbPreDelay(float time);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbSize(float size);
	///
	/// \brief	Sets reverb size.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	size	The size.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbSize(float size);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbDensity(float density);
	///
	/// \brief	Sets reverb density.
	///
	/// \author	Jack Campbell
	/// \date	6/1/2017
	///
	/// \param	density	The density.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbDensity(float density);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \fn	snd_err SoundCall::SetReverbPreset(flimReverb reverb);
	///
	/// \brief	Sets reverb preset.
	///
	/// \author	Jack Campbell
	/// \date	6/3/2017
	///
	/// \param	reverb	The reverb.
	///
	/// \return	A snd_err.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	snd_err SetReverbPreset(flimReverb reverb);

private:
	friend class SoundEngine;


	Timer time;
	int priorityIndex;
	bool is3D;
	friend class MarkForPlayCommand;

	snd_err SuccessfullyPlay(int index);

	friend class MarkForStopCommand;
	snd_err SuccessfullyStop();

	// atrributes
	int currentTime;
	float volume;
	float pitch;
	float pan;
	int priority;
	bool isPlaying;
	bool loop;


	friend class CallbackSoundEndedCommand;
	snd_err SoundEnded();
	SoundExecutioner* soundEndedBroker;

	SoundCallID id;
	Handle  handle;
};

#endif
